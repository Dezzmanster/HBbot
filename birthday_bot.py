import os
import json
import schedule
import time
import asyncio
import logging
from datetime import datetime
from typing import List, Dict
from dotenv import load_dotenv
from telegram import Bot
from langchain_gigachat.chat_models import GigaChat

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("birthday_bot.log", encoding="utf-8"),
        logging.StreamHandler(),
    ],
)
logger = logging.getLogger(__name__)


class BirthdayBot:
    def __init__(self):
        logger.debug("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.gigachat_credentials = os.getenv("GIGACHAT_CREDENTIALS")
        self.gigachat_scope = os.getenv("GIGACHAT_SCOPE", "GIGACHAT_API_PERS")
        self.gigachat_model = os.getenv("GIGACHAT_MODEL", "GigaChat-2")
        self.default_chat_id = os.getenv("CHAT_ID")

        if not self.bot_token:
            logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        if not self.gigachat_credentials:
            logger.error("GIGACHAT_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
            raise ValueError("GIGACHAT_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º default_chat_id –≤ int, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if self.default_chat_id:
            try:
                self.default_chat_id = int(self.default_chat_id)
                logger.debug(f"Default chat_id —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.default_chat_id}")
            except ValueError:
                logger.error("CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                raise ValueError("CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

        logger.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot...")
        self.bot = Bot(token=self.bot_token)

        logger.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GigaChat...")
        self.gigachat = GigaChat(
            credentials=self.gigachat_credentials,
            scope=self.gigachat_scope,
            verify_ssl_certs=False,
            model=self.gigachat_model,
        )

        self.users_config_path = "users_config.json"
        self.prompt_file_path = "birthday_prompt.txt"
        logger.debug("BirthdayBot —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def load_config(self) -> tuple[List[Dict], str, int]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (—Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏, default_chat_id)
        """
        try:
            logger.debug(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ {self.users_config_path}")
            with open(self.users_config_path, "r", encoding="utf-8") as f:
                config = json.load(f)
                users = config.get("users", [])
                birthday_time = config.get("birthday_time", "09:00")
                config_default_chat = config.get("default_chat_id")
                logger.debug(
                    f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {birthday_time}"
                )
                return users, birthday_time, config_default_chat
        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª {self.users_config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return [], "09:00", None
        except json.JSONDecodeError:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON –∏–∑ —Ñ–∞–π–ª–∞ {self.users_config_path}")
            return [], "09:00", None

    def load_birthday_prompt(self) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π"""
        try:
            with open(self.prompt_file_path, "r", encoding="utf-8") as f:
                return f.read().strip()
        except FileNotFoundError:
            logger.warning(
                f"–§–∞–π–ª {self.prompt_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç"
            )
            return "–ü–æ–∑–¥—Ä–∞–≤—å {name} —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è!"

    def get_today_birthdays(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è"""
        users, _, _ = self.load_config()
        if not users:
            return []

        today = datetime.now().strftime("%d.%m")
        birthday_users = [user for user in users if user.get("birthday") == today]
        return birthday_users

    def generate_birthday_message(self, name: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é GigaChat"""
        try:
            prompt_template = self.load_birthday_prompt()
            prompt = prompt_template.format(name=name)

            response = self.gigachat.invoke(prompt)
            return response.content
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
            return f"üéâüéÇ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º {name} —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! üåü‚ú® –ñ–µ–ª–∞–µ–º –∫—Ä–µ–ø–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è, –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω–æ–≥–æ —Å—á–∞—Å—Ç—å—è, —è—Ä–∫–∏—Ö —ç–º–æ—Ü–∏–π –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –º–µ—á—Ç! üéÅüí´ –ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω —Ä–∞–¥–æ—Å—Ç—å—é –∏ —Ç–µ–ø–ª–æ–º –±–ª–∏–∑–∫–∏—Ö! ü•≥üíñ"

    async def send_birthday_messages(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞–º"""
        birthday_users = self.get_today_birthdays()

        if not birthday_users:
            logger.info("–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤")
            return

        # –ü–æ–ª—É—á–∞–µ–º default_chat_id –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        _, _, config_default_chat = self.load_config()

        for user in birthday_users:
            try:
                name = user.get("name", "–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥")
                username = user.get("username", "")

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_chat_id = user.get("chat_id")
                if not user_chat_id:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º default_chat_id –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –∏–∑ .env
                    user_chat_id = config_default_chat or self.default_chat_id

                if not user_chat_id:
                    logger.error(
                        f"–ù–µ –Ω–∞–π–¥–µ–Ω chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name}. –£–∫–∞–∂–∏—Ç–µ chat_id –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ CHAT_ID –≤ .env"
                    )
                    continue

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
                birthday_message = self.generate_birthday_message(name)

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if username:
                    final_message = f"@{username}\n\n{birthday_message}"
                else:
                    final_message = f"{name}\n\n{birthday_message}"

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown
                try:
                    await self.bot.send_message(
                        chat_id=user_chat_id, text=final_message, parse_mode="Markdown"
                    )
                except Exception as markdown_error:
                    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ Markdown, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
                    logger.warning(
                        f"–û—à–∏–±–∫–∞ Markdown —Ä–∞–∑–º–µ—Ç–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {markdown_error}"
                    )
                    await self.bot.send_message(
                        chat_id=user_chat_id, text=final_message
                    )

                logger.info(f"–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {name} –≤ —á–∞—Ç {user_chat_id}")

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await asyncio.sleep(1)

            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è {user.get('name', 'Unknown')}: {e}"
                )

    def run_birthday_check(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞)"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(self.send_birthday_messages())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º loop –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            if "loop" in locals():
                loop.close()

    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        _, birthday_time, _ = self.load_config()

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        schedule.every().day.at(birthday_time).do(self.run_birthday_check)

        logger.info(
            f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {birthday_time}"
        )
        logger.info("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

        while True:
            schedule.run_pending()
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        bot = BirthdayBot()
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∏
        logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...")
        bot.run_birthday_check()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        bot.start_scheduler()

    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)


if __name__ == "__main__":
    main()
